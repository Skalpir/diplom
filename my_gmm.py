# filename: my_gmm.py

import os
import time
import json
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

# –Ω–æ–≤–∏–π —Ñ–∞–π–ª = n  –≤ —Å–µ–∫ 
# —Å–æ—Ö—Ä–∞–Ω—è—é –º–æ–¥–µ–ª—å
# —Ä–æ–±–ª—é –ø—Ä–µ–¥—ñ–∫—Ç

#–µ–∫—Ä–∞–Ω –∑ –º–æ–¥–µ–ª—è–º–∏ (—Å–∫–∞—á—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π)
#–∑–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–µ–π –∑ —Ä—ñ–∑–Ω–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏(–≥–æ—Ç–æ–≤–∏–º–∏ —ñ –Ω—ñ)
#beta-flyer
#rocket launh data imu

class GMM:
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –º–æ–¥–µ–ª—ñ
    def __init__(self, n_components, max_iters=100, tol=1e-6, random_state=42, logger=None, reg_cov=1e-6):
        self.n_components = n_components  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ (–∫–ª–∞—Å—Ç–µ—Ä—ñ–≤) –≤ –º–æ–¥–µ–ª—ñ
        self.max_iters = max_iters  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º—É
        self.tol = tol  # –î–æ–ø—É—Å—Ç–∏–º–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è —ñ—Ç–µ—Ä–∞—Ü—ñ–π
        self.random_state = random_state  # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä—é–≤–∞–Ω–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.logger = logger  # –õ–æ–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å—É –ø—Ä–æ—Ü–µ—Å—É
        self.reg_cov = reg_cov  # –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü—ñ—è –¥–ª—è –∫–æ–≤–∞—Ä–∏–∞—Ü—ñ–π, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —ó—Ö –≤–∏—Ä–æ–¥–∂–µ–Ω–Ω—è
        self.trained = False  # –ü—Ä–∞–ø–æ—Ä–µ—Ü—å, —è–∫–∏–π –≤–∫–∞–∑—É—î –Ω–∞ —Ç–µ, —â–æ –º–æ–¥–µ–ª—å –Ω–∞–≤—á–µ–Ω–∞

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ (—Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å, –∫–æ–≤–∞—Ä–∏–∞—Ü—ñ–π —Ç–∞ –≤–∞–≥)
    def initialize_params(self, X):
        n_samples, n_features = X.shape  # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –≤–∏–±—ñ—Ä–∫–∏
        np.random.seed(self.random_state)  # –§—ñ–∫—Å—É–≤–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä—é–≤–∞–Ω–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.means = X[np.random.choice(n_samples, self.n_components, replace=False)]  # –í–∏–±—ñ—Ä –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å
        self.covariances = np.array([np.eye(n_features) for _ in range(self.n_components)])  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–≤–∞—Ä–∏–∞—Ü—ñ–π (—ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ –º–∞—Ç—Ä–∏—Ü—ñ)
        self.weights = np.ones(self.n_components) / self.n_components  # –†—ñ–≤–Ω—ñ –≤–∞–≥–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        self.resp = np.zeros((n_samples, self.n_components))  # –ú–∞—Ç—Ä–∏—Ü—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π (—è–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —î –±—ñ–ª—å—à –π–º–æ–≤—ñ—Ä–Ω–æ—é)

    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –≥–∞—É—Å—Å—ñ–≤—Å—å–∫–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É
    def gaussian_pdf(self, X, mean, cov):
        n = X.shape[1]  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–∑–Ω–∞–∫
        diff = X - mean  # –†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –¥–∞–Ω–∏–º–∏ —Ç–∞ —Å–µ—Ä–µ–¥–Ω—ñ–º
        try:
            inv_cov = np.linalg.inv(cov)  # –û–±—á–∏—Å–ª—é—î–º–æ –∑–≤–æ—Ä–æ—Ç–Ω—É –º–∞—Ç—Ä–∏—Ü—é –∫–æ–≤–∞—Ä–∏–∞—Ü—ñ–π
        except np.linalg.LinAlgError:
            return np.zeros(X.shape[0])  # –Ø–∫—â–æ –º–∞—Ç—Ä–∏—Ü—è –∫–æ–≤–∞—Ä–∏–∞—Ü—ñ–π –≤–∏—Ä–æ–¥–∂–µ–Ω–∞ (–Ω–µ–æ–±—Ä–∞—Ç–Ω–∞), –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω—É–ª—ñ
        exp_term = np.exp(-0.5 * np.sum(diff @ inv_cov * diff, axis=1))  # –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–∞–ª—å–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        denom = np.sqrt((2 * np.pi) ** n * np.linalg.det(cov))  # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏–π –º–Ω–æ–∂–Ω–∏–∫
        return exp_term / denom  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å

    # E-–µ—Ç–∞–ø (–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞)
    def e_step(self, X):
        for i in range(self.n_components):  # –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            self.resp[:, i] = self.weights[i] * self.gaussian_pdf(X, self.means[i], self.covariances[i])  # –û–±—á–∏—Å–ª—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å
        self.resp /= self.resp.sum(axis=1, keepdims=True)  # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π (—Å—É–º–∞ –º–∞—î –±—É—Ç–∏ 1)
        if np.any(np.isnan(self.resp)):  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ NaN –≤ –º–∞—Ç—Ä–∏—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π
            raise ValueError("NaN values found in responsibility matrix.")  # –Ø–∫—â–æ —î NaN, –≤–∏–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É

    # M-–µ—Ç–∞–ø (–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –º–æ–¥–µ–ª—ñ)
    def m_step(self, X):
        Nk = self.resp.sum(axis=0)  # –°—É–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ –∫–æ–∂–Ω–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
        self.weights = Nk / X.shape[0]  # –û–Ω–æ–≤–ª—é—î–º–æ –≤–∞–≥–∏ (–ø—Ä–æ–ø–æ—Ä—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞)
        self.means = (self.resp.T @ X) / Nk[:, np.newaxis]  # –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        for i in range(self.n_components):
            diff = X - self.means[i]  # –†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –¥–∞–Ω–∏–º–∏ —Ç–∞ –Ω–æ–≤–∏–º —Å–µ—Ä–µ–¥–Ω—ñ–º
            self.covariances[i] = (self.resp[:, i][:, np.newaxis] * diff).T @ diff / Nk[i]  # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–≤–∞—Ä–∏–∞—Ü—ñ—ó
            self.covariances[i] += np.eye(X.shape[1]) * self.reg_cov  # –î–æ–¥–∞—î–º–æ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü—ñ—é –¥–æ –∫–æ–≤–∞—Ä–∏–∞—Ü—ñ–π
            if np.any(np.isnan(self.covariances[i])):  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ NaN –≤ –∫–æ–≤–∞—Ä–∏–∞—Ü—ñ–π–Ω—ñ–π –º–∞—Ç—Ä–∏—Ü—ñ
                raise ValueError(f"NaN values found in covariance matrix for component {i}.")  # –Ø–∫—â–æ —î NaN, –≤–∏–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É

    # –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
    def fit(self, X):
        if self.logger:
            self.logger(f"üìå –ü–æ—á–∞—Ç–æ–∫ –Ω–∞–≤—á–∞–Ω–Ω—è GMM –∑ n_components={self.n_components}, random_state={self.random_state}")

        self.initialize_params(X)  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—ñ

        # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —ñ—Ç–µ—Ä–∞—Ü—ñ–π
        for iteration in range(self.max_iters):
            prev_means = self.means.copy()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö
            try:
                self.e_step(X)  # E-–µ—Ç–∞–ø
                self.m_step(X)  # M-–µ—Ç–∞–ø
            except ValueError as e:
                if self.logger:
                    self.logger(f"‚ùå {e}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ –≤–∏–Ω–∏–∫–∞—î NaN
                break

            if self.logger:
                self.logger(f"üîÅ –Ü—Ç–µ—Ä–∞—Ü—ñ—è {iteration+1}")
                self.logger(f"–°–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ (means): {self.means.tolist()}")
                self.logger(f"–í–∞–≥–∏ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ (weights): {self.weights.tolist()}")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—é
            if np.linalg.norm(self.means - prev_means) < self.tol:
                if self.logger:
                    self.logger(f"‚úÖ –ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è –¥–æ—Å—è–≥–Ω—É—Ç–∞ –Ω–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—ó {iteration+1}")
                break

        self.trained = True  # –ü—ñ—Å–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å

    # –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
    def predict(self, X):
        if not self.trained:
            raise Exception("Model is not trained yet.")  # –Ø–∫—â–æ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–≤—á–µ–Ω–∞, –≤–∏–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
        likelihoods = np.array([  # –û–±—á–∏—Å–ª—é—î–º–æ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            self.weights[i] * self.gaussian_pdf(X, self.means[i], self.covariances[i])
            for i in range(self.n_components)
        ]).T
        return np.argmax(likelihoods, axis=1)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é

    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ª–æ–≥–∞—Ä–∏—Ñ–º—É –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑—Ä–∞–∑–∫–∞
    def score_samples(self, X):
        likelihoods = np.zeros(X.shape[0])  # –ú–∞—Å–∏–≤ –¥–ª—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π
        for i in range(self.n_components):
            likelihoods += self.weights[i] * self.gaussian_pdf(X, self.means[i], self.covariances[i])  # –°—É–º–∞ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        return np.log(np.clip(likelihoods, a_min=1e-300, a_max=None))  # –õ–æ–≥–∞—Ä–∏—Ñ–º –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π, –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º –Ω–∞ –º—ñ–Ω—ñ–º—É–º

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –º–æ–¥–µ–ª—ñ
    def get_params(self):
        return {
            "means": self.means.tolist(),  # –°–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
            "covariances": [c.tolist() for c in self.covariances],  # –ö–æ–≤–∞—Ä–∏–∞—Ü—ñ–π–Ω—ñ –º–∞—Ç—Ä–∏—Ü—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
            "weights": self.weights.tolist()  # –í–∞–≥–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        }




class MyGMMAnalyzer:
    def __init__(self, csv_path, results_root='results', n_components=3):
        self.csv_path = csv_path
        self.n_components = n_components
        self.data = None
        self.numeric_data = None
        self.model = None

        base = os.path.basename(csv_path)
        name, _ = os.path.splitext(base)
        timestamp = time.strftime("%m-%d_%H-%M-%S")
        self.output_dir = os.path.join(results_root, f"{timestamp}_{name}_mygmm")
        Path(self.output_dir).mkdir(parents=True, exist_ok=True)
        self.log_file = os.path.join(self.output_dir, "log.txt")

    def log(self, message):
        timestamp = time.strftime("[%H:%M:%S]")
        full_message = f"{timestamp} {message}"
        print(full_message)
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(full_message + "\n")

    def run(self):
        try:
            print(" my_gmm.py")
            print(self.csv_path)
            self.log("üîÑ –ó–∞–ø—É—Å–∫ MyGMM-–∞–Ω–∞–ª—ñ–∑—É...")
            self.load_data()
            self.log("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            self.fit_model()
            self.log("üîç –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            self.save_results()
            self.log("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
            self.generate_plots()
            self.log("üìä –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as e:
            self.log(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {e}")
            raise

    def load_data(self):
        self.log(f"–ß–∏—Ç–∞–Ω–Ω—è CSV: {self.csv_path}")
        self.data = pd.read_csv(self.csv_path)
        self.numeric_data = self.data[["X", "Y", "Z"]].dropna().values
        self.log(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(self.numeric_data)} –≤–∞–ª—ñ–¥–Ω–∏—Ö –∑—Ä–∞–∑–∫—ñ–≤.")

    def fit_model(self):
        self.model = GMM(n_components=self.n_components, random_state=42, logger=self.log)
        self.model.fit(self.numeric_data)
        self.data["Cluster"] = self.model.predict(self.numeric_data)
        self.data["Log_Probability"] = self.model.score_samples(self.numeric_data)

    def save_results(self):
        base = os.path.basename(self.csv_path)
        name, _ = os.path.splitext(base) 
        clusters_csv = os.path.join(self.output_dir, "processed_data.csv") #f"{name}_with_clusters.csv"
        self.data.to_csv(clusters_csv, index=False)
        self.log(f"üìÑ CSV –∑ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ {clusters_csv}")

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ GMM —É JSON
        gmm_params_path = os.path.join(self.output_dir, "gmm_params.json")
        with open(gmm_params_path, "w", encoding="utf-8") as f:
            json.dump(self.model.get_params(), f, indent=2)
        self.log(f"üìÅ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ {gmm_params_path}")

    def generate_plots(self):
        cluster_plot_path = os.path.join(self.output_dir, "plot_clusters.png")
        plt.figure(figsize=(8, 6))
        sns.scatterplot(x="X", y="Y", hue=self.data["Cluster"].map(lambda x: f"–ö–ª–∞—Å—Ç–µ—Ä_{x+1}"),
                        data=self.data, palette='viridis')
        plt.title("üìå –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤")
        plt.legend(title="–ö–ª–∞—Å—Ç–µ—Ä–∏")
        plt.savefig(cluster_plot_path)
        plt.close()

        ll_plot_path = os.path.join(self.output_dir, "plot_log_likelihood.png")
        plt.figure(figsize=(8, 4))
        plt.plot(self.data["Log_Probability"], color='blue')
        plt.title("üìâ Log-Likelihood –ø–æ –∑—Ä–∞–∑–∫–∞—Ö")
        plt.xlabel("–Ü–Ω–¥–µ–∫—Å –∑—Ä–∞–∑–∫–∞")
        plt.ylabel("Log Probability")
        plt.savefig(ll_plot_path)
        plt.close()

        hist_plot_path = os.path.join(self.output_dir, "plot_histogram.png")
        plt.figure(figsize=(6, 4))
        self.data["Cluster"].value_counts().sort_index().plot(kind="bar", color='green')
        plt.title("üìä –†–æ–∑–ø–æ–¥—ñ–ª –∑—Ä–∞–∑–∫—ñ–≤ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º")
        plt.xlabel("–ö–ª–∞—Å—Ç–µ—Ä")
        plt.ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑—Ä–∞–∑–∫—ñ–≤")
        plt.savefig(hist_plot_path)
        plt.close()

        heatmap_path = os.path.join(self.output_dir, "plot_heatmap.png")
        plt.figure(figsize=(6, 5))
        sns.heatmap(pd.DataFrame(self.numeric_data, columns=["X", "Y", "Z"]).corr(), annot=True, cmap='coolwarm')
        plt.title("üî• –¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ (–∫–æ—Ä–µ–ª—è—Ü—ñ—è –º—ñ–∂ —Å–µ–Ω—Å–æ—Ä–∞–º–∏)")
        plt.savefig(heatmap_path)
        plt.close()
