# filename: gmm_sklearn.py

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import json
import time
from pathlib import Path
from sklearn.mixture import GaussianMixture

class SklearnGMMAnalyzer:
    def __init__(self, csv_path, results_root='results', n_components=3, random_state=42):
        self.csv_path = csv_path
        self.n_components = n_components
        self.random_state = random_state
        self.data = None
        self.numeric_data = None
        self.model = None

        base = os.path.basename(csv_path)
        name, _ = os.path.splitext(base)
        timestamp = time.strftime("%m-%d_%H-%M-%S")
        self.output_dir = os.path.join(results_root, f"{timestamp}_{name}")
        Path(self.output_dir).mkdir(parents=True, exist_ok=True)

        self.log_file = os.path.join(self.output_dir, "log.txt")

    def log(self, message, start_time=None):
        timestamp = time.strftime("[%H:%M:%S]")
        duration = f" (+{time.time() - start_time:.2f}s)" if start_time else ""
        full_message = f"{timestamp} {message}{duration}"
        print(full_message)
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(full_message + "\n")

    def run(self):
        try:
            print("sklearn_gmm.py")
            self.log("üîÑ –ó–∞–ø—É—Å–∫ GMM-–∞–Ω–∞–ª—ñ–∑—É...")
            
            t0 = time.time()
            self.load_data()
            self.log("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", t0)

            t1 = time.time()
            self.fit_model()
            self.log("üîç –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ GMM –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", t1)

            t2 = time.time()
            self.save_model_params()
            self.log("üß† –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", t2)

            t3 = time.time()
            self.save_results()
            self.log("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", t3)

            t4 = time.time()
            self.generate_plots()
            self.log("üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", t4)

            self.log("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.", t0)
        except Exception as e:
            self.log(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {e}")
            raise

    def load_data(self):
        self.log(f"–ß–∏—Ç–∞–Ω–Ω—è CSV: {self.csv_path}")
        self.data = pd.read_csv(self.csv_path)
        self.numeric_data = self.data[["X", "Y", "Z"]].dropna()
        self.log(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(self.numeric_data)} –≤–∞–ª—ñ–¥–Ω–∏—Ö –∑—Ä–∞–∑–∫—ñ–≤.")

    def fit_model(self):
        self.log(f"–ü–æ—á–∞—Ç–æ–∫ –Ω–∞–≤—á–∞–Ω–Ω—è GMM –∑ n_components={self.n_components}, random_state={self.random_state}")
        self.model = GaussianMixture(n_components=self.n_components, random_state=self.random_state)
        self.model.fit(self.numeric_data)
        self.log("‚úÖ GMM –Ω–∞–≤—á–µ–Ω–æ.")
        
        self.log(f"–°–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ (means):\n{self.model.means_}")
        self.log(f"–ö–æ–≤–∞—Ä—ñ–∞—Ü—ñ—ó –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ (covariances):\n{self.model.covariances_}")
        self.log(f"–í–∞–≥–∏ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ (weights): {self.model.weights_}")

        clusters = self.model.predict(self.numeric_data)
        self.data["Cluster"] = clusters

        log_probs = self.model.score_samples(self.numeric_data)
        self.data["Log_Probability"] = log_probs

        self.log("üî¢ –ö–ª–∞—Å—Ç–µ—Ä–∏ —Ç–∞ log-—ñ–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –¥–æ–¥–∞–Ω–æ –¥–æ –¥–∞–Ω–∏—Ö.")

        new_samples = self.model.sample(10)[0]
        self.new_samples_df = pd.DataFrame(new_samples, columns=["X", "Y", "Z"])
        self.log("üÜï –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ 10 –Ω–æ–≤–∏—Ö –∑—Ä–∞–∑–∫—ñ–≤ –∑ GMM.")

    def save_model_params(self):
        params = {
            "n_components": self.n_components,
            "random_state": self.random_state,
            "means": self.model.means_.tolist(),
            "covariances": self.model.covariances_.tolist(),
            "weights": self.model.weights_.tolist(),
        }
        path = os.path.join(self.output_dir, "gmm_params.json")
        with open(path, "w", encoding="utf-8") as f:
            json.dump(params, f, indent=4)
        self.log(f"üß† –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ {path}")

    def save_results(self):
        base = os.path.basename(self.csv_path)
        name, _ = os.path.splitext(base)
        clusters_csv = os.path.join(self.output_dir, "processed_data.csv") #f"{name}_with_clusters.csv"
        generated_csv = os.path.join(self.output_dir, f"{name}_generated_samples.csv")
        self.data.to_csv(clusters_csv, index=False)
        self.new_samples_df.to_csv(generated_csv, index=False)
        self.log(f"üìÑ CSV –∑ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ {clusters_csv}")
        self.log(f"üìÑ CSV –∑ –Ω–æ–≤–∏–º–∏ –∑—Ä–∞–∑–∫–∞–º–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ {generated_csv}")

    def generate_plots(self):
        cluster_plot_path = os.path.join(self.output_dir, "plot_clusters.png")
        plt.figure(figsize=(8, 6))
        sns.scatterplot(x="X", y="Y", hue=self.data["Cluster"].map(lambda x: f"–ö–ª–∞—Å—Ç–µ—Ä_{x+1}"),
                        data=self.data, palette='viridis')
        plt.title("üìå –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤")
        plt.legend(title="–ö–ª–∞—Å—Ç–µ—Ä–∏")
        plt.savefig(cluster_plot_path)
        plt.close()
        self.log("üìç –ì—Ä–∞—Ñ—ñ–∫ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")

        ll_plot_path = os.path.join(self.output_dir, "plot_log_likelihood.png")
        plt.figure(figsize=(8, 4))
        plt.plot(self.data["Log_Probability"], color='blue')
        plt.title("üìâ Log-Likelihood –ø–æ –∑—Ä–∞–∑–∫–∞—Ö")
        plt.xlabel("–Ü–Ω–¥–µ–∫—Å –∑—Ä–∞–∑–∫–∞")
        plt.ylabel("Log Probability")
        plt.savefig(ll_plot_path)
        plt.close()
        self.log("üìà –ì—Ä–∞—Ñ—ñ–∫ log-likelihood –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")

        hist_plot_path = os.path.join(self.output_dir, "plot_histogram.png")
        plt.figure(figsize=(6, 4))
        self.data["Cluster"].value_counts().sort_index().plot(kind="bar", color='green')
        plt.title("üìä –†–æ–∑–ø–æ–¥—ñ–ª –∑—Ä–∞–∑–∫—ñ–≤ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º")
        plt.xlabel("–ö–ª–∞—Å—Ç–µ—Ä")
        plt.ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑—Ä–∞–∑–∫—ñ–≤")
        plt.savefig(hist_plot_path)
        plt.close()
        self.log("üìä –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–∞.")

        heatmap_path = os.path.join(self.output_dir, "plot_heatmap.png")
        plt.figure(figsize=(6, 5))
        sns.heatmap(self.numeric_data.corr(), annot=True, cmap='coolwarm')
        plt.title("üî• –¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ (–∫–æ—Ä–µ–ª—è—Ü—ñ—è –º—ñ–∂ —Å–µ–Ω—Å–æ—Ä–∞–º–∏)")
        plt.savefig(heatmap_path)
        plt.close()
        self.log("üî• –¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞.")
